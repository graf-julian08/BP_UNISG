using MaximumSubarray;

namespace MaximumSubarrayTest
{
    [TestClass]
    public sealed class SubarrayTest
    {
        [TestMethod]
        public void TestMaxSubarray_String10()
        {
            // Arrange
            string printedNumberList = "192, -222, 32, 44, -10, 26, 16, -5, 4, 20";
            int expectedResult = 192;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var value = subarray.FindMaxSubarray(numberList);
            int maxSum = value.maxSum;

            // Assert
            Assert.AreEqual(expectedResult, maxSum);
        }

        [TestMethod]
        public void TestMaxSubarray_String1000()
        {
            // Arrange
            string printedNumberList = "-290, 112, 287, 186, 643, 879, -383, 35, -467, 223, -751, 269, 361, 377, 689, -920, 941, -138, 503, 37, 155, 282, -724, -63, 795, -180, -501, -512, 875, 161, 15, -576, 732, 952, -214, -874, 740, -616, 450, 803, 906, -900, -59, -623, 140, 741, -413, -856, -360, -634, -636, 632, -193, 992, -386, -679, -822, 334, -679, 106, -128, 71, 784, 802, -201, 640, -764, -358, 133, -939, -943, -291, 576, -566, 219, 252, -682, -643, 908, 619, 314, -982, -361, -221, -553, 362, -721, -159, 303, -497, 535, -292, 571, -511, -963, 18, 43, 409, 340, -484, -525, -696, -90, 85, 815, 483, 396, -387, 428, 42, -820, -476, -627, 212, 670, -918, -83, 42, -966, -318, 239, 975, -232, 147, 605, 894, -680, -887, -684, 950, -576, -265, -217, -810, 72, -349, 7, -170, -982, -55, -627, -304, -797, -631, 148, -893, -313, -507, -731, 169, -497, 312, 455, -725, 804, 852, 325, 981, -373, -330, 405, -883, -436, -218, -356, 21, 394, -615, -660, 913, 927, -375, -580, -420, -338, 410, 694, 929, 210, -997, -72, 332, 14, -508, 52, -817, -697, -153, -363, -437, 662, 354, 835, -396, 364, 587, 225, -110, 523, -38, -420, 598, -475, -548, -26, 374, 188, 882, 78, -434, -115, 587, 676, -90, 726, 984, -79, 204, 816, -673, -913, -707, -332, 340, -695, 581, -686, 796, -185, 279, 537, 250, -763, 321, -131, -484, -556, -321, -607, -398, -458, 68, 527, -465, 780, 95, 562, -331, 481, 993, -613, 605, -491, 338, 983, 516, -21, -166, 421, 691, 781, -581, -359, 115, 186, -804, 242, 807, -838, -831, -184, -414, -241, -86, 46, -717, 762, 910, 780, 706, 462, -218, -504, 885, 867, -829, -172, -972, -215, -34, 571, -276, -74, -286, -523, -641, 112, 976, 909, -223, 171, 595, 932, 268, -438, 199, 553, -152, -482, 182, -205, -43, -922, 736, -850, 97, 808, 85, -937, 807, 315, 221, -907, -62, -273, 226, 490, 268, 953, 169, -286, 24, -70, -306, 655, 772, -834, -861, -263, 705, -546, -12, -676, -500, -43, 783, 78, 874, 288, 989, 728, 840, 760, -471, 423, -346, 945, -422, -934, 704, 879, 323, 782, -471, -60, -766, -856, -102, -528, -491, 846, -365, 276, 315, -726, 60, -789, -180, 266, 115, 223, -419, 992, 453, -632, 753, 160, -701, 767, 724, 536, 286, -138, 810, 427, -914, -597, 366, 877, -169, 508, 713, 515, -644, 707, -516, 895, -208, 1000, -169, 844, -889, -496, 864, -320, 32, 119, -177, -329, -312, -955, -792, -113, -691, -390, -638, -452, 242, -581, -735, 398, -278, -547, -784, 432, -886, -827, 915, -891, 460, -375, -433, 79, -250, 394, -908, -834, 951, 491, -818, -119, -626, -993, -341, 731, -694, 220, -969, -820, 72, 22, -294, 269, 683, 746, 93, -265, 247, 985, -656, 953, -851, -884, 492, -142, 499, 806, 480, 690, 818, -33, -651, -492, 320, 550, 589, -66, 585, 673, -133, -140, 43, 730, -836, -862, 864, -264, -956, 284, 792, 529, -748, 672, 404, 453, -372, 199, 53, 44, -283, -251, 28, 829, 603, -933, 575, -239, -648, 607, 202, -627, 413, 313, -998, -807, -721, 328, 632, -561, -9, -671, -578, -533, -315, -960, 286, -940, 772, -487, 31, -473, 596, -216, 533, 955, -285, -573, 751, 666, 245, 203, -527, 790, -501, 49, 425, 481, 30, 133, 86, -271, -919, 327, -753, -473, -217, -804, 850, -872, -627, 541, -198, 415, -159, 81, -79, -754, -699, -432, 137, -80, -16, 84, -696, -198, -24, 944, -971, 880, -545, -350, -7, -417, -714, 795, -606, 492, -385, -845, -315, -103, 485, -414, -495, 934, -897, -981, -380, -240, 298, -215, -497, -671, -311, -315, -838, 509, 100, -641, 373, 245, -107, 310, -876, 976, 142, 452, -945, 433, -57, -277, 377, -18, 953, 993, -548, -996, -379, -461, -865, -162, 198, 266, -526, 52, 497, -54, 29, 229, 956, 985, 502, 160, -113, -715, -671, 793, -896, -109, -406, 852, -665, -637, -338, 665, 831, -14, -286, -680, 408, 682, 120, 495, 662, 539, -454, 103, 869, 219, -91, -8, -117, 226, 21, 844, -863, 383, -309, -68, -342, -996, 129, 956, -349, 535, 493, -250, 458, -761, 943, 604, 480, 894, 125, 270, -871, -164, -11, 816, 598, 209, -871, 306, 840, -571, -139, -916, 693, -700, 595, -165, -178, -753, -574, 745, -362, -48, -619, 374, -731, 998, 656, -109, -663, 317, 613, 768, 797, -23, -86, -40, -355, -87, 281, 186, 107, -390, 247, -617, -882, -591, -376, 71, 55, 45, 341, 128, 878, -89, -370, 353, -633, -809, -385, -927, 620, 816, 21, -976, -100, -203, -906, -830, -581, -516, -643, 979, 122, 715, 958, -910, -381, 408, -845, 381, 360, 18, 565, -334, -664, -70, 248, -978, 702, -70, -483, 889, -522, 1000, -660, 104, 930, 567, 239, 406, -799, 859, -573, -585, -486, -258, 674, 395, 718, -348, 356, 161, 674, -156, -395, 902, 445, -607, 666, 748, 848, 962, -555, 132, -49, 419, -635, -32, 113, 693, -703, 326, -321, 773, -715, 341, -447, 44, -288, 9, 267, 317, 637, -138, -753, -234, -966, 44, 270, 659, 369, -288, -8, -96, 126, -623, 165, 491, -200, 761, -318, -487, 697, 463, 830, -56, 403, -560, -971, 29, 332, 633, -503, 37, -700, 179, -579, 100, -510, 756, -878, 472, 959, -571, -330, -917, 368, 866, 798, 191, 472, 235, 84, 443, 419, -730, 834, 813, -232, -294, 830, 416, -740, 475, -617, -415, 161, 173, 594, 584, -622, 40, -388, -882, -538, 17, 154, -367, 791, -94, 231, 955, 901, -973, 93, 751, 248, -811, -961, -997, -378, 12, 195, 145, 117, 137, -963, -478, 844, 657, 248, -392, -83, -460, -488, 345, 314, -17, -944, -187, 440, -988, -24, 400, 419, 721, 389, 400, 975, -951, 284, -324, -173, 706, -627, 888, 901, 929, -50, 281, 557, -408, -785, 657, 282, 941, 946, -435, 498, -76, 734, 867, 923, -920, -227, 315, -450, 626, -265, 936, -811, 244, 772, 795, -492";
            int expectedResult = 19933;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var value = subarray.FindMaxSubarray(numberList);
            int maxSum = value.maxSum;

            // Assert
            Assert.AreEqual(expectedResult, maxSum);
        }

        [TestMethod]
        public void TestLargestSubarray_String100()
        {
            // Arrange
            string printedNumberList = "654, -190, -122, -776, 919, 73, 855, 85, 170, -238, 62, 955, -666, -224, 540, 514, 938, 317, -694, -414, -970, 222, -184, 677, -755, 417, 152, 154, -34, 784, -632, -436, 82, 276, 908, 616, 939, 260, 604, 117, -628, 783, 119, 981, -358, -990, -201, -98, -755, -2, 89, 272, 29, 480, 30, -1, 145, 985, -66, -393, 164, -129, 524, -528, 920, -138, -632, 173, -967, -329, -411, -495, 94, 174, 283, 240, 943, 808, -979, 882, 80, 267, -437, -635, -218, -664, 422, -539, -992, 340, -751, -955, -708, -50, -479, 451, 315, 875, 767, 485";
            int expectedResultMaxStart = 4;
            int expectedResultMaxEnd = 64;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var result = subarray.FindMaxSubarray(numberList);

            int maxSumStartPosition = result.maxSumStartPosition;
            int maxSumEndPosition = result.maxSumEndPosition;

            // Assert
            Assert.AreEqual(expectedResultMaxStart, maxSumStartPosition);
            Assert.AreEqual(expectedResultMaxEnd, maxSumEndPosition);
        }

        [TestMethod]
        public void Wrong_TestMaxSubarray_String10()
        {
            // Arrange
            string printedNumberList = "13, -12, 3, 48, -100, 67, 41, -69, 21, 88";
            int expectedResult = 99;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var value = subarray.FindMaxSubarray(numberList);
            int maxSum = value.maxSum;

            // Assert
            Assert.AreNotEqual(expectedResult, maxSum);
        }

        [TestMethod]
        public void Wrong_TestMaxSubarray_String1000()
        {
            // Arrange
            string printedNumberList = "-320, 2, 467, 978, 222, 333, -1853, 3345, -242, 45, -457, 244, 788, 880, 079, -255, 23, -23, 503, 37, 155, 282, -724, -63, 795, -180, -501, -512, 875, 161, 15, -576, 732, 952, -214, -874, 740, -616, 450, 803, 906, -900, -59, -623, 140, 741, -413, -856, -360, -634, -636, 632, -193, 992, -386, -679, -822, 334, -679, 106, -128, 71, 784, 802, -201, 640, -764, -358, 133, -939, -943, -291, 576, -566, 219, 252, -682, -643, 908, 619, 314, -982, -361, -221, -553, 362, -721, -159, 303, -497, 535, -292, 571, -511, -963, 18, 43, 409, 340, -484, -525, -696, -90, 85, 815, 483, 396, -387, 428, 42, -820, -476, -627, 212, 670, -918, -83, 42, -966, -318, 239, 975, -232, 147, 605, 894, -680, -887, -684, 950, -576, -265, -217, -810, 72, -349, 7, -170, -982, -55, -627, -304, -797, -631, 148, -893, -313, -507, -731, 169, -497, 312, 455, -725, 804, 852, 325, 981, -373, -330, 405, -883, -436, -218, -356, 21, 394, -615, -660, 913, 927, -375, -580, -420, -338, 410, 694, 929, 210, -997, -72, 332, 14, -508, 52, -817, -697, -153, -363, -437, 662, 354, 835, -396, 364, 587, 225, -110, 523, -38, -420, 598, -475, -548, -26, 374, 188, 882, 78, -434, -115, 587, 676, -90, 726, 984, -79, 204, 816, -673, -913, -707, -332, 340, -695, 581, -686, 796, -185, 279, 537, 250, -763, 321, -131, -484, -556, -321, -607, -398, -458, 68, 527, -465, 780, 95, 562, -331, 481, 993, -613, 605, -491, 338, 983, 516, -21, -166, 421, 691, 781, -581, -359, 115, 186, -804, 242, 807, -838, -831, -184, -414, -241, -86, 46, -717, 762, 910, 780, 706, 462, -218, -504, 885, 867, -829, -172, -972, -215, -34, 571, -276, -74, -286, -523, -641, 112, 976, 909, -223, 171, 595, 932, 268, -438, 199, 553, -152, -482, 182, -205, -43, -922, 736, -850, 97, 808, 85, -937, 807, 315, 221, -907, -62, -273, 226, 490, 268, 953, 169, -286, 24, -70, -306, 655, 772, -834, -861, -263, 705, -546, -12, -676, -500, -43, 783, 78, 874, 288, 989, 728, 840, 760, -471, 423, -346, 945, -422, -934, 704, 879, 323, 782, -471, -60, -766, -856, -102, -528, -491, 846, -365, 276, 315, -726, 60, -789, -180, 266, 115, 223, -419, 992, 453, -632, 753, 160, -701, 767, 724, 536, 286, -138, 810, 427, -914, -597, 366, 877, -169, 508, 713, 515, -644, 707, -516, 895, -208, 1000, -169, 844, -889, -496, 864, -320, 32, 119, -177, -329, -312, -955, -792, -113, -691, -390, -638, -452, 242, -581, -735, 398, -278, -547, -784, 432, -886, -827, 915, -891, 460, -375, -433, 79, -250, 394, -908, -834, 951, 491, -818, -119, -626, -993, -341, 731, -694, 220, -969, -820, 72, 22, -294, 269, 683, 746, 93, -265, 247, 985, -656, 953, -851, -884, 492, -142, 499, 806, 480, 690, 818, -33, -651, -492, 320, 550, 589, -66, 585, 673, -133, -140, 43, 730, -836, -862, 864, -264, -956, 284, 792, 529, -748, 672, 404, 453, -372, 199, 53, 44, -283, -251, 28, 829, 603, -933, 575, -239, -648, 607, 202, -627, 413, 313, -998, -807, -721, 328, 632, -561, -9, -671, -578, -533, -315, -960, 286, -940, 772, -487, 31, -473, 596, -216, 533, 955, -285, -573, 751, 666, 245, 203, -527, 790, -501, 49, 425, 481, 30, 133, 86, -271, -919, 327, -753, -473, -217, -804, 850, -872, -627, 541, -198, 415, -159, 81, -79, -754, -699, -432, 137, -80, -16, 84, -696, -198, -24, 944, -971, 880, -545, -350, -7, -417, -714, 795, -606, 492, -385, -845, -315, -103, 485, -414, -495, 934, -897, -981, -380, -240, 298, -215, -497, -671, -311, -315, -838, 509, 100, -641, 373, 245, -107, 310, -876, 976, 142, 452, -945, 433, -57, -277, 377, -18, 953, 993, -548, -996, -379, -461, -865, -162, 198, 266, -526, 52, 497, -54, 29, 229, 956, 985, 502, 160, -113, -715, -671, 793, -896, -109, -406, 852, -665, -637, -338, 665, 831, -14, -286, -680, 408, 682, 120, 495, 662, 539, -454, 103, 869, 219, -91, -8, -117, 226, 21, 844, -863, 383, -309, -68, -342, -996, 129, 956, -349, 535, 493, -250, 458, -761, 943, 604, 480, 894, 125, 270, -871, -164, -11, 816, 598, 209, -871, 306, 840, -571, -139, -916, 693, -700, 595, -165, -178, -753, -574, 745, -362, -48, -619, 374, -731, 998, 656, -109, -663, 317, 613, 768, 797, -23, -86, -40, -355, -87, 281, 186, 107, -390, 247, -617, -882, -591, -376, 71, 55, 45, 341, 128, 878, -89, -370, 353, -633, -809, -385, -927, 620, 816, 21, -976, -100, -203, -906, -830, -581, -516, -643, 979, 122, 715, 958, -910, -381, 408, -845, 381, 360, 18, 565, -334, -664, -70, 248, -978, 702, -70, -483, 889, -522, 1000, -660, 104, 930, 567, 239, 406, -799, 859, -573, -585, -486, -258, 674, 395, 718, -348, 356, 161, 674, -156, -395, 902, 445, -607, 666, 748, 848, 962, -555, 132, -49, 419, -635, -32, 113, 693, -703, 326, -321, 773, -715, 341, -447, 44, -288, 9, 267, 317, 637, -138, -753, -234, -966, 44, 270, 659, 369, -288, -8, -96, 126, -623, 165, 491, -200, 761, -318, -487, 697, 463, 830, -56, 403, -560, -971, 29, 332, 633, -503, 37, -700, 179, -579, 100, -510, 756, -878, 472, 959, -571, -330, -917, 368, 866, 798, 191, 472, 235, 84, 443, 419, -730, 834, 813, -232, -294, 830, 416, -740, 475, -617, -415, 161, 173, 594, 584, -622, 40, -388, -882, -538, 17, 154, -367, 791, -94, 231, 955, 901, -973, 93, 751, 248, -811, -961, -997, -378, 12, 195, 145, 117, 137, -963, -478, 844, 657, 248, -392, -83, -460, -488, 345, 314, -17, -944, -187, 440, -988, -24, 400, 419, 721, 389, 400, 975, -951, 284, -324, -173, 706, -627, 888, 901, 929, -50, 281, 557, -408, -785, 657, 282, 941, 946, -435, 498, -76, 734, 867, 923, -920, -227, 315, -450, 626, -265, 936, -811, 244, 772, 795, -492";
            int expectedResult = 72833;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var value = subarray.FindMaxSubarray(numberList);
            int maxSum = value.maxSum;

            // Assert
            Assert.AreNotEqual(expectedResult, maxSum);
        }

        [TestMethod]
        public void Wrong_TestLargestSubarray_String100()
        {
            // Arrange
            string printedNumberList = "2343, -343, -44, -2, 34435, 73553, -213855, 2424285, -112370, -4353, 635332, 45445, -666, -4545, 540, 514, 938, 317, -694, -414, -970, 222, -184, 677, -755, 417, 152, 154, -34, 784, -632, -436, 82, 276, 908, 616, 939, 260, 604, 117, -628, 783, 119, 981, -358, -990, -201, -98, -755, -2, 89, 272, 29, 480, 30, -1, 145, 985, -66, -393, 164, -129, 524, -528, 920, -138, -632, 173, -967, -329, -411, -495, 94, 174, 283, 240, 943, 808, -979, 882, 80, 267, -437, -635, -218, -664, 422, -539, -992, 340, -751, -955, -708, -50, -479, 451, 315, 875, 767, 485";
            int expectedResultMaxStart = 87;
            int expectedResultMaxEnd = 667;

            // Act
            StartArray array = new StartArray();
            List<int> numberList = array.CreateArray(printedNumberList);

            Subarray subarray = new Subarray();
            var result = subarray.FindMaxSubarray(numberList);

            int maxSumStartPosition = result.maxSumStartPosition;
            int maxSumEndPosition = result.maxSumEndPosition;

            // Assert
            Assert.AreNotEqual(expectedResultMaxStart, maxSumStartPosition);
            Assert.AreNotEqual(expectedResultMaxEnd, maxSumEndPosition);
        }
    }
}